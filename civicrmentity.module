<?php

/**
 * Implements hook_entity_info().
 */
function civicrmentity_entity_info() {
  $info = array();
  if (!civicrm_initialize()) {
    return;
  }
  require_once 'api/api.php';
  $entities = civicrm_api('Entity', 'Get', array('version' => 3));
  foreach ($entities['values'] as $value) {

    // Remove camel case for entity type.
    $entity_type = $value;
    $entity_type[0] = strtolower($entity_type[0]);
    $func = create_function('$c', 'return "_" . strtolower($c[1]);');
    $entity_type = preg_replace_callback('/([A-Z])/', $func, $entity_type);

    // Remove camel case for label.
    $func = create_function('$c', 'return " " . $c[1];');
    $label = trim(preg_replace_callback('/([A-Z])/', $func, $value));

    $key = 'civicrm_'. $entity_type;

    $info[$key] = array(
      'label' => $label,
      'entity class' => 'Entity',
      'controller class' => 'CiviCRMEntityController',
      'metadata controller class' => FALSE,
      'fieldable' => TRUE,
      'entity class' => 'Entity',
      'admin ui' => array(
        'path' => 'civicrmentity/'. $entity_type,
        'controller class' => 'CiviCRMEntityUIController',
      ),
      'access callback' => 'civicrmentity_access',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'id',
      ),
      'bundles' => array(
        $key => array(
          'label' => $label,
          'admin' => array(
            'path' => 'admin/config/civicrm/entity/'. str_replace('_', '-', $entity_type),
          ),
        ),
      ),

      // Existence of this property indicates that this is a CiviCRM entity to other
      // parts of this module.
      'civicrm' => array(
        'entity' => $value,
      ),
      'static cache' => FALSE,
    );
  }
  return $info;
}

/**
 *
 */
function civicrmentity_access($op, $entity = NULL, $account = NULL) {
  return TRUE;
}


/**
 * Implements hook_menu().
 */
function civicrmentity_menu() {
  $items = array();
  $items['admin/config/civicrm/entity'] = array(
    'title' => 'Entity',
    'description' => 'Fieldable CiviCRM entities',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function civicrmentity_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_info) {
    if (isset($entity_info['civicrm'])) {
      foreach ($entity_info['bundles'] as $file_type => $bundle_info) {
        if (isset($bundle_info['admin'])) {

          // Get the base path and access.
          $path = $bundle_info['admin']['path'];
          $items[$path] = $items[$path .'/fields'];
          $items[$path]['type'] = MENU_NORMAL_ITEM;
          $items[$path]['title'] = $entity_info['label'];
          $items[$path]['description'] = t('CiviCRM @entity entity', array('@entity' => $entity_info['civicrm']['entity']));
          $items[$path .'/fields']['type'] = MENU_DEFAULT_LOCAL_TASK;
        }
      }
    }
  }
}

function civicrmentity_form($form, $form_state, $entity, $op, $entity_type) {

  // Add the field related form elements.
  $form_state['entity'] = $entity;
  field_attach_form($entity_type, $entity, $form, $form_state);

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['#validate'] = array();
  $form['#submit'] = array();
  $form['#validate'][] = 'civicrmentity_form_validate';
  $form['#submit'][] = 'civicrmentity_form_submit';

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => $submit + array(),
  );

//  if (!empty($model->name)) {
//    $form['actions']['delete'] = array(
//      '#type' => 'submit',
//      '#value' => t('Delete model'),
//      '#suffix' => l(t('Cancel'), 'admin/content/models'),
//      '#submit' => $submit + array('model_form_submit_delete'),
//      '#weight' => 45,
//    );
//  }

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  return $form;
}

/**
 * Form API validate callback for the entity form
 */
function civicrmentity_form_validate(&$form, &$form_state) {
  $entity = $form_state['entity'];
  $entity_type = $form_state['entity_type'];

  // Notify field widgets to validate their data.
  field_attach_form_validate($entity_type, $entity, $form, $form_state);
}


/**
 * Form API submit callback for the entity form.
 *
 * @todo remove hard-coded link
 */
function civicrmentity_form_submit(&$form, &$form_state) {
  $entity_type = $form_state['entity_type'];
  $entity = entity_ui_controller($entity_type)->entityFormSubmitBuildEntity($form, $form_state);
  // Save the model and go back to the list of entitys

  // Add in created and changed times.
  if ($entity->is_new = isset($entity->is_new) ? $entity->is_new : 0){
    $entity->created = time();
  }

  $entity->changed = time();

  $entity->save();
}
